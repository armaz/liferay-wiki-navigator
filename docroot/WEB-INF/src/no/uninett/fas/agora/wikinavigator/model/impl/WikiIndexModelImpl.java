/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package no.uninett.fas.agora.wikinavigator.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import no.uninett.fas.agora.wikinavigator.model.WikiIndex;
import no.uninett.fas.agora.wikinavigator.model.WikiIndexModel;

import java.io.Serializable;

import java.sql.Types;

/**
 * The base model implementation for the WikiIndex service. Represents a row in the &quot;UN_WikiIndex&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link no.uninett.fas.agora.wikinavigator.model.WikiIndexModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WikiIndexImpl}.
 * </p>
 *
 * @author armaz
 * @see WikiIndexImpl
 * @see no.uninett.fas.agora.wikinavigator.model.WikiIndex
 * @see no.uninett.fas.agora.wikinavigator.model.WikiIndexModel
 * @generated
 */
public class WikiIndexModelImpl extends BaseModelImpl<WikiIndex>
	implements WikiIndexModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a wiki index model instance should use the {@link no.uninett.fas.agora.wikinavigator.model.WikiIndex} interface instead.
	 */
	public static final String TABLE_NAME = "UN_WikiIndex";
	public static final Object[][] TABLE_COLUMNS = {
			{ "nodeId", Types.BIGINT },
			{ "content", Types.CLOB },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "auto_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table UN_WikiIndex (nodeId LONG not null primary key,content TEXT null,companyId LONG,groupId LONG,auto_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table UN_WikiIndex";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.no.uninett.fas.agora.wikinavigator.model.WikiIndex"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.no.uninett.fas.agora.wikinavigator.model.WikiIndex"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.no.uninett.fas.agora.wikinavigator.model.WikiIndex"));

	public WikiIndexModelImpl() {
	}

	public long getPrimaryKey() {
		return _nodeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setNodeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_nodeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return WikiIndex.class;
	}

	public String getModelClassName() {
		return WikiIndex.class.getName();
	}

	public long getNodeId() {
		return _nodeId;
	}

	public void setNodeId(long nodeId) {
		_nodeId = nodeId;
	}

	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	public void setContent(String content) {
		_content = content;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public boolean getAuto() {
		return _auto;
	}

	public boolean isAuto() {
		return _auto;
	}

	public void setAuto(boolean auto) {
		_auto = auto;
	}

	@Override
	public WikiIndex toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (WikiIndex)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					WikiIndex.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		WikiIndexImpl wikiIndexImpl = new WikiIndexImpl();

		wikiIndexImpl.setNodeId(getNodeId());
		wikiIndexImpl.setContent(getContent());
		wikiIndexImpl.setCompanyId(getCompanyId());
		wikiIndexImpl.setGroupId(getGroupId());
		wikiIndexImpl.setAuto(getAuto());

		wikiIndexImpl.resetOriginalValues();

		return wikiIndexImpl;
	}

	public int compareTo(WikiIndex wikiIndex) {
		long primaryKey = wikiIndex.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		WikiIndex wikiIndex = null;

		try {
			wikiIndex = (WikiIndex)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = wikiIndex.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<WikiIndex> toCacheModel() {
		WikiIndexCacheModel wikiIndexCacheModel = new WikiIndexCacheModel();

		wikiIndexCacheModel.nodeId = getNodeId();

		wikiIndexCacheModel.content = getContent();

		String content = wikiIndexCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			wikiIndexCacheModel.content = null;
		}

		wikiIndexCacheModel.companyId = getCompanyId();

		wikiIndexCacheModel.groupId = getGroupId();

		wikiIndexCacheModel.auto = getAuto();

		return wikiIndexCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{nodeId=");
		sb.append(getNodeId());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", auto=");
		sb.append(getAuto());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("no.uninett.fas.agora.wikinavigator.model.WikiIndex");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>nodeId</column-name><column-value><![CDATA[");
		sb.append(getNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auto</column-name><column-value><![CDATA[");
		sb.append(getAuto());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WikiIndex.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			WikiIndex.class
		};
	private long _nodeId;
	private String _content;
	private long _companyId;
	private long _groupId;
	private boolean _auto;
	private transient ExpandoBridge _expandoBridge;
	private WikiIndex _escapedModelProxy;
}